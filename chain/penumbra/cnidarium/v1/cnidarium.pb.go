// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: penumbra/cnidarium/v1/cnidarium.proto

package cnidariumv1

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	types "github.com/cosmos/ibc-go/v8/modules/core/23-commitment/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Performs a key-value query, either by key or by key hash.
//
// Proofs are only supported by key.
type KeyValueRequest struct {
	// If set, the key to fetch from storage.
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// whether to return a proof
	Proof bool `protobuf:"varint,3,opt,name=proof,proto3" json:"proof,omitempty"`
}

func (m *KeyValueRequest) Reset()         { *m = KeyValueRequest{} }
func (m *KeyValueRequest) String() string { return proto.CompactTextString(m) }
func (*KeyValueRequest) ProtoMessage()    {}
func (*KeyValueRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c16e20a97a348b2e, []int{0}
}
func (m *KeyValueRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeyValueRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KeyValueRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KeyValueRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyValueRequest.Merge(m, src)
}
func (m *KeyValueRequest) XXX_Size() int {
	return m.Size()
}
func (m *KeyValueRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyValueRequest.DiscardUnknown(m)
}

var xxx_messageInfo_KeyValueRequest proto.InternalMessageInfo

func (m *KeyValueRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *KeyValueRequest) GetProof() bool {
	if m != nil {
		return m.Proof
	}
	return false
}

type KeyValueResponse struct {
	// The value corresponding to the specified key, if it was found.
	Value *KeyValueResponse_Value `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// A proof of existence or non-existence.
	Proof *types.MerkleProof `protobuf:"bytes,2,opt,name=proof,proto3" json:"proof,omitempty"`
}

func (m *KeyValueResponse) Reset()         { *m = KeyValueResponse{} }
func (m *KeyValueResponse) String() string { return proto.CompactTextString(m) }
func (*KeyValueResponse) ProtoMessage()    {}
func (*KeyValueResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c16e20a97a348b2e, []int{1}
}
func (m *KeyValueResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeyValueResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KeyValueResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KeyValueResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyValueResponse.Merge(m, src)
}
func (m *KeyValueResponse) XXX_Size() int {
	return m.Size()
}
func (m *KeyValueResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyValueResponse.DiscardUnknown(m)
}

var xxx_messageInfo_KeyValueResponse proto.InternalMessageInfo

func (m *KeyValueResponse) GetValue() *KeyValueResponse_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *KeyValueResponse) GetProof() *types.MerkleProof {
	if m != nil {
		return m.Proof
	}
	return nil
}

type KeyValueResponse_Value struct {
	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *KeyValueResponse_Value) Reset()         { *m = KeyValueResponse_Value{} }
func (m *KeyValueResponse_Value) String() string { return proto.CompactTextString(m) }
func (*KeyValueResponse_Value) ProtoMessage()    {}
func (*KeyValueResponse_Value) Descriptor() ([]byte, []int) {
	return fileDescriptor_c16e20a97a348b2e, []int{1, 0}
}
func (m *KeyValueResponse_Value) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeyValueResponse_Value) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KeyValueResponse_Value.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KeyValueResponse_Value) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyValueResponse_Value.Merge(m, src)
}
func (m *KeyValueResponse_Value) XXX_Size() int {
	return m.Size()
}
func (m *KeyValueResponse_Value) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyValueResponse_Value.DiscardUnknown(m)
}

var xxx_messageInfo_KeyValueResponse_Value proto.InternalMessageInfo

func (m *KeyValueResponse_Value) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

// Performs a prefixed key-value query, by string prefix.
type PrefixValueRequest struct {
	// The prefix to fetch subkeys from storage.
	Prefix string `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
}

func (m *PrefixValueRequest) Reset()         { *m = PrefixValueRequest{} }
func (m *PrefixValueRequest) String() string { return proto.CompactTextString(m) }
func (*PrefixValueRequest) ProtoMessage()    {}
func (*PrefixValueRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c16e20a97a348b2e, []int{2}
}
func (m *PrefixValueRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrefixValueRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrefixValueRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrefixValueRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrefixValueRequest.Merge(m, src)
}
func (m *PrefixValueRequest) XXX_Size() int {
	return m.Size()
}
func (m *PrefixValueRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PrefixValueRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PrefixValueRequest proto.InternalMessageInfo

func (m *PrefixValueRequest) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

type PrefixValueResponse struct {
	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *PrefixValueResponse) Reset()         { *m = PrefixValueResponse{} }
func (m *PrefixValueResponse) String() string { return proto.CompactTextString(m) }
func (*PrefixValueResponse) ProtoMessage()    {}
func (*PrefixValueResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c16e20a97a348b2e, []int{3}
}
func (m *PrefixValueResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrefixValueResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrefixValueResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrefixValueResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrefixValueResponse.Merge(m, src)
}
func (m *PrefixValueResponse) XXX_Size() int {
	return m.Size()
}
func (m *PrefixValueResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PrefixValueResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PrefixValueResponse proto.InternalMessageInfo

func (m *PrefixValueResponse) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *PrefixValueResponse) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

// Requests a stream of new key-value pairs that have been committed to the state.
type WatchRequest struct {
	// A regex for keys in the verifiable storage.
	//
	// Only key-value updates whose keys match this regex will be returned.
	// Note that the empty string matches all keys.
	// To exclude all keys, use the regex "$^", which matches no strings.
	KeyRegex string `protobuf:"bytes,1,opt,name=key_regex,json=keyRegex,proto3" json:"key_regex,omitempty"`
	// A regex for keys in the nonverifiable storage.
	//
	// Only key-value updates whose keys match this regex will be returned.
	// Note that the empty string matches all keys.
	// To exclude all keys, use the regex "$^", which matches no strings.
	NvKeyRegex string `protobuf:"bytes,2,opt,name=nv_key_regex,json=nvKeyRegex,proto3" json:"nv_key_regex,omitempty"`
}

func (m *WatchRequest) Reset()         { *m = WatchRequest{} }
func (m *WatchRequest) String() string { return proto.CompactTextString(m) }
func (*WatchRequest) ProtoMessage()    {}
func (*WatchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c16e20a97a348b2e, []int{4}
}
func (m *WatchRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WatchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WatchRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WatchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchRequest.Merge(m, src)
}
func (m *WatchRequest) XXX_Size() int {
	return m.Size()
}
func (m *WatchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WatchRequest proto.InternalMessageInfo

func (m *WatchRequest) GetKeyRegex() string {
	if m != nil {
		return m.KeyRegex
	}
	return ""
}

func (m *WatchRequest) GetNvKeyRegex() string {
	if m != nil {
		return m.NvKeyRegex
	}
	return ""
}

// A key-value pair that has been committed to the state.
type WatchResponse struct {
	// The state version the key-value pair was committed at.
	Version uint64 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	// The entry that was committed.
	//
	// Types that are valid to be assigned to Entry:
	//	*WatchResponse_Kv
	//	*WatchResponse_NvKv
	Entry isWatchResponse_Entry `protobuf_oneof:"entry"`
}

func (m *WatchResponse) Reset()         { *m = WatchResponse{} }
func (m *WatchResponse) String() string { return proto.CompactTextString(m) }
func (*WatchResponse) ProtoMessage()    {}
func (*WatchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c16e20a97a348b2e, []int{5}
}
func (m *WatchResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WatchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WatchResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WatchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchResponse.Merge(m, src)
}
func (m *WatchResponse) XXX_Size() int {
	return m.Size()
}
func (m *WatchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WatchResponse proto.InternalMessageInfo

type isWatchResponse_Entry interface {
	isWatchResponse_Entry()
	MarshalTo([]byte) (int, error)
	Size() int
}

type WatchResponse_Kv struct {
	Kv *WatchResponse_KeyValue `protobuf:"bytes,5,opt,name=kv,proto3,oneof" json:"kv,omitempty"`
}
type WatchResponse_NvKv struct {
	NvKv *WatchResponse_NvKeyValue `protobuf:"bytes,6,opt,name=nv_kv,json=nvKv,proto3,oneof" json:"nv_kv,omitempty"`
}

func (*WatchResponse_Kv) isWatchResponse_Entry()   {}
func (*WatchResponse_NvKv) isWatchResponse_Entry() {}

func (m *WatchResponse) GetEntry() isWatchResponse_Entry {
	if m != nil {
		return m.Entry
	}
	return nil
}

func (m *WatchResponse) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *WatchResponse) GetKv() *WatchResponse_KeyValue {
	if x, ok := m.GetEntry().(*WatchResponse_Kv); ok {
		return x.Kv
	}
	return nil
}

func (m *WatchResponse) GetNvKv() *WatchResponse_NvKeyValue {
	if x, ok := m.GetEntry().(*WatchResponse_NvKv); ok {
		return x.NvKv
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*WatchResponse) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*WatchResponse_Kv)(nil),
		(*WatchResponse_NvKv)(nil),
	}
}

// Elements of the verifiable storage have string keys.
type WatchResponse_KeyValue struct {
	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	// If set to true, the key-value pair was deleted.
	// This allows distinguishing a deleted key-value pair from a key-value pair whose value is empty.
	Deleted bool `protobuf:"varint,3,opt,name=deleted,proto3" json:"deleted,omitempty"`
}

func (m *WatchResponse_KeyValue) Reset()         { *m = WatchResponse_KeyValue{} }
func (m *WatchResponse_KeyValue) String() string { return proto.CompactTextString(m) }
func (*WatchResponse_KeyValue) ProtoMessage()    {}
func (*WatchResponse_KeyValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_c16e20a97a348b2e, []int{5, 0}
}
func (m *WatchResponse_KeyValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WatchResponse_KeyValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WatchResponse_KeyValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WatchResponse_KeyValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchResponse_KeyValue.Merge(m, src)
}
func (m *WatchResponse_KeyValue) XXX_Size() int {
	return m.Size()
}
func (m *WatchResponse_KeyValue) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchResponse_KeyValue.DiscardUnknown(m)
}

var xxx_messageInfo_WatchResponse_KeyValue proto.InternalMessageInfo

func (m *WatchResponse_KeyValue) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *WatchResponse_KeyValue) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *WatchResponse_KeyValue) GetDeleted() bool {
	if m != nil {
		return m.Deleted
	}
	return false
}

// Elements of the nonverifiable storage have byte keys.
type WatchResponse_NvKeyValue struct {
	Key   []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	// If set to true, the key-value pair was deleted.
	// This allows distinguishing a deleted key-value pair from a key-value pair whose value is empty.
	Deleted bool `protobuf:"varint,3,opt,name=deleted,proto3" json:"deleted,omitempty"`
}

func (m *WatchResponse_NvKeyValue) Reset()         { *m = WatchResponse_NvKeyValue{} }
func (m *WatchResponse_NvKeyValue) String() string { return proto.CompactTextString(m) }
func (*WatchResponse_NvKeyValue) ProtoMessage()    {}
func (*WatchResponse_NvKeyValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_c16e20a97a348b2e, []int{5, 1}
}
func (m *WatchResponse_NvKeyValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WatchResponse_NvKeyValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WatchResponse_NvKeyValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WatchResponse_NvKeyValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchResponse_NvKeyValue.Merge(m, src)
}
func (m *WatchResponse_NvKeyValue) XXX_Size() int {
	return m.Size()
}
func (m *WatchResponse_NvKeyValue) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchResponse_NvKeyValue.DiscardUnknown(m)
}

var xxx_messageInfo_WatchResponse_NvKeyValue proto.InternalMessageInfo

func (m *WatchResponse_NvKeyValue) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *WatchResponse_NvKeyValue) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *WatchResponse_NvKeyValue) GetDeleted() bool {
	if m != nil {
		return m.Deleted
	}
	return false
}

func init() {
	proto.RegisterType((*KeyValueRequest)(nil), "penumbra.cnidarium.v1.KeyValueRequest")
	proto.RegisterType((*KeyValueResponse)(nil), "penumbra.cnidarium.v1.KeyValueResponse")
	proto.RegisterType((*KeyValueResponse_Value)(nil), "penumbra.cnidarium.v1.KeyValueResponse.Value")
	proto.RegisterType((*PrefixValueRequest)(nil), "penumbra.cnidarium.v1.PrefixValueRequest")
	proto.RegisterType((*PrefixValueResponse)(nil), "penumbra.cnidarium.v1.PrefixValueResponse")
	proto.RegisterType((*WatchRequest)(nil), "penumbra.cnidarium.v1.WatchRequest")
	proto.RegisterType((*WatchResponse)(nil), "penumbra.cnidarium.v1.WatchResponse")
	proto.RegisterType((*WatchResponse_KeyValue)(nil), "penumbra.cnidarium.v1.WatchResponse.KeyValue")
	proto.RegisterType((*WatchResponse_NvKeyValue)(nil), "penumbra.cnidarium.v1.WatchResponse.NvKeyValue")
}

func init() {
	proto.RegisterFile("penumbra/cnidarium/v1/cnidarium.proto", fileDescriptor_c16e20a97a348b2e)
}

var fileDescriptor_c16e20a97a348b2e = []byte{
	// 642 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0x4d, 0x6f, 0xd3, 0x4c,
	0x10, 0x8e, 0xb7, 0x75, 0x3f, 0xa6, 0x79, 0x5f, 0xaa, 0x85, 0x42, 0x08, 0x22, 0x0a, 0x29, 0xd0,
	0x82, 0xa8, 0x5d, 0x97, 0x0b, 0x0d, 0x42, 0x48, 0xa9, 0x04, 0x48, 0xa5, 0x95, 0x09, 0x28, 0x7c,
	0x55, 0xaa, 0x1c, 0x67, 0xda, 0x5a, 0x49, 0xd6, 0x61, 0xbd, 0x5e, 0x35, 0xff, 0x82, 0x03, 0xbf,
	0x80, 0x1b, 0xdc, 0xf8, 0x17, 0x88, 0x53, 0x8f, 0x70, 0x43, 0xc9, 0x8d, 0x5f, 0x81, 0xfc, 0x15,
	0x27, 0x10, 0x4a, 0xc4, 0x29, 0x79, 0x66, 0x67, 0x9e, 0xe7, 0x99, 0x9d, 0xf1, 0xc2, 0xb5, 0x0e,
	0x32, 0xbf, 0x5d, 0xe7, 0x96, 0x6e, 0x33, 0xa7, 0x61, 0x71, 0xc7, 0x6f, 0xeb, 0xd2, 0x48, 0x81,
	0xd6, 0xe1, 0xae, 0x70, 0xe9, 0x52, 0x92, 0xa6, 0xa5, 0x27, 0xd2, 0xc8, 0xaf, 0x38, 0x75, 0x5b,
	0xb7, 0x5d, 0x8e, 0xba, 0xed, 0xb6, 0xdb, 0x8e, 0x68, 0x23, 0x13, 0x61, 0xf9, 0x00, 0x45, 0xf5,
	0xa5, 0x4d, 0x38, 0xb3, 0x8d, 0xdd, 0x9a, 0xd5, 0xf2, 0xb1, 0x8a, 0x6f, 0x7c, 0xf4, 0x04, 0x5d,
	0x84, 0xa9, 0x26, 0x76, 0x73, 0xa4, 0xa8, 0xac, 0xce, 0x57, 0x83, 0xbf, 0xf4, 0x1c, 0xa8, 0x1d,
	0xee, 0xba, 0x07, 0xb9, 0xa9, 0xa2, 0xb2, 0x3a, 0x57, 0x8d, 0x40, 0xe9, 0x93, 0x02, 0x8b, 0x69,
	0xad, 0xd7, 0x71, 0x99, 0x87, 0x74, 0x0b, 0x54, 0x19, 0x04, 0x72, 0x4a, 0x51, 0x59, 0x5d, 0xd8,
	0x58, 0xd3, 0xc6, 0xfa, 0xd3, 0x7e, 0xad, 0xd3, 0x22, 0x14, 0xd5, 0xd2, 0xcd, 0x44, 0x8f, 0x84,
	0x24, 0xcb, 0x9a, 0x53, 0xb7, 0xb5, 0xa0, 0x1b, 0x6d, 0xc8, 0xbf, 0x34, 0xb4, 0x1d, 0xe4, 0xcd,
	0x16, 0x9a, 0x41, 0x6a, 0x6c, 0x2a, 0x7f, 0x19, 0xd4, 0x90, 0x2a, 0xf0, 0x9c, 0x1a, 0xc9, 0xc6,
	0xcc, 0xa5, 0x5b, 0x40, 0x4d, 0x8e, 0x07, 0xce, 0xf1, 0x48, 0xc7, 0xe7, 0x61, 0xa6, 0x13, 0x46,
	0xe3, 0xa6, 0x63, 0x54, 0xba, 0x07, 0x67, 0x47, 0xb2, 0xe3, 0x1e, 0xe3, 0x0b, 0x52, 0x46, 0x2e,
	0x28, 0x12, 0x23, 0xc3, 0x62, 0x3b, 0x90, 0x7d, 0x6e, 0x09, 0xfb, 0x28, 0x91, 0xb9, 0x04, 0xf3,
	0x4d, 0xec, 0xee, 0x73, 0x3c, 0xc4, 0xe3, 0xb8, 0x7a, 0xae, 0x89, 0xdd, 0x6a, 0x80, 0x69, 0x11,
	0xb2, 0x4c, 0xee, 0xa7, 0xe7, 0x91, 0x13, 0x60, 0x72, 0x3b, 0xce, 0x28, 0x7d, 0x23, 0xf0, 0x5f,
	0xcc, 0x17, 0x1b, 0xc9, 0xc1, 0xac, 0x44, 0xee, 0x39, 0x2e, 0x0b, 0xe9, 0xa6, 0xab, 0x09, 0xa4,
	0xf7, 0x81, 0x34, 0x65, 0x4e, 0x3d, 0x75, 0x06, 0x23, 0x5c, 0x83, 0x89, 0x3c, 0xca, 0x54, 0x49,
	0x53, 0xd2, 0x07, 0xa0, 0x06, 0x76, 0x64, 0x6e, 0x26, 0xe4, 0xd0, 0x27, 0xe2, 0xd8, 0x95, 0x43,
	0x2c, 0xd3, 0x4c, 0x6e, 0xcb, 0xfc, 0x63, 0x98, 0x4b, 0x62, 0x93, 0xde, 0x5b, 0xd0, 0x56, 0x03,
	0x5b, 0x28, 0xb0, 0x11, 0x2f, 0x5c, 0x02, 0xf3, 0xbb, 0x00, 0xa9, 0xc6, 0x30, 0x5f, 0xf6, 0x9f,
	0xf8, 0x2a, 0xb3, 0xa0, 0x22, 0x13, 0xbc, 0xbb, 0xf1, 0x81, 0x40, 0xf6, 0x89, 0x8f, 0xbc, 0xfb,
	0x14, 0xb9, 0x74, 0x6c, 0xa4, 0xaf, 0x87, 0x7c, 0x5f, 0xff, 0xeb, 0x12, 0x87, 0xf3, 0xcd, 0xaf,
	0x4c, 0xb8, 0xec, 0xf4, 0x00, 0x16, 0x86, 0xf6, 0x8a, 0xde, 0xf8, 0x43, 0xdd, 0xef, 0x9b, 0x9a,
	0xbf, 0x39, 0x49, 0x6a, 0xa4, 0xb2, 0xae, 0xd0, 0x67, 0xa0, 0x86, 0x03, 0xa2, 0xcb, 0xa7, 0x8f,
	0x2f, 0xe2, 0xbe, 0x3a, 0xc9, 0x8c, 0xd7, 0x95, 0xca, 0x3b, 0xf2, 0xb9, 0x57, 0x50, 0x4e, 0x7a,
	0x05, 0xe5, 0x7b, 0xaf, 0xa0, 0xbc, 0xed, 0x17, 0x32, 0x27, 0xfd, 0x42, 0xe6, 0x6b, 0xbf, 0x90,
	0x81, 0x8b, 0xb6, 0xdb, 0x1e, 0xcf, 0x52, 0xf9, 0x7f, 0x2b, 0x41, 0x66, 0xf0, 0xf0, 0x98, 0xca,
	0xab, 0x97, 0x87, 0x8e, 0x38, 0xf2, 0xeb, 0xc1, 0x37, 0xad, 0x7b, 0x82, 0x5b, 0xec, 0x10, 0x5b,
	0xae, 0xc4, 0x35, 0x89, 0x4c, 0xf8, 0x1c, 0x3d, 0xdd, 0x61, 0x02, 0xb9, 0x7d, 0x64, 0x05, 0xbf,
	0x9e, 0xd0, 0xe5, 0x1d, 0x3d, 0x04, 0xfa, 0xd8, 0x97, 0xf1, 0xee, 0x00, 0x48, 0xe3, 0x3d, 0x99,
	0x32, 0xb7, 0x5e, 0x7c, 0x24, 0x4b, 0x66, 0x62, 0x65, 0x20, 0xae, 0xd5, 0x8c, 0x2f, 0x69, 0x7c,
	0x6f, 0x10, 0xdf, 0xab, 0x19, 0x3d, 0x72, 0x65, 0x6c, 0x7c, 0xef, 0xa1, 0x59, 0xd9, 0x41, 0x61,
	0x35, 0x2c, 0x61, 0xfd, 0x20, 0x17, 0x92, 0x9c, 0x72, 0x79, 0x90, 0x54, 0x2e, 0xd7, 0x8c, 0xfa,
	0x4c, 0xf8, 0xa0, 0xde, 0xfe, 0x19, 0x00, 0x00, 0xff, 0xff, 0x4c, 0xc5, 0xeb, 0xef, 0xb9, 0x05,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryServiceClient is the client API for QueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryServiceClient interface {
	// General-purpose key-value state query API, that can be used to query
	// arbitrary keys in the JMT storage.
	KeyValue(ctx context.Context, in *KeyValueRequest, opts ...grpc.CallOption) (*KeyValueResponse, error)
	// General-purpose prefixed key-value state query API, that can be used to query
	// arbitrary prefixes in the JMT storage.
	PrefixValue(ctx context.Context, in *PrefixValueRequest, opts ...grpc.CallOption) (QueryService_PrefixValueClient, error)
	// Subscribes to a stream of key-value updates, with regex filtering on keys.
	Watch(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (QueryService_WatchClient, error)
}

type queryServiceClient struct {
	cc grpc1.ClientConn
}

func NewQueryServiceClient(cc grpc1.ClientConn) QueryServiceClient {
	return &queryServiceClient{cc}
}

func (c *queryServiceClient) KeyValue(ctx context.Context, in *KeyValueRequest, opts ...grpc.CallOption) (*KeyValueResponse, error) {
	out := new(KeyValueResponse)
	err := c.cc.Invoke(ctx, "/penumbra.cnidarium.v1.QueryService/KeyValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) PrefixValue(ctx context.Context, in *PrefixValueRequest, opts ...grpc.CallOption) (QueryService_PrefixValueClient, error) {
	stream, err := c.cc.NewStream(ctx, &_QueryService_serviceDesc.Streams[0], "/penumbra.cnidarium.v1.QueryService/PrefixValue", opts...)
	if err != nil {
		return nil, err
	}
	x := &queryServicePrefixValueClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type QueryService_PrefixValueClient interface {
	Recv() (*PrefixValueResponse, error)
	grpc.ClientStream
}

type queryServicePrefixValueClient struct {
	grpc.ClientStream
}

func (x *queryServicePrefixValueClient) Recv() (*PrefixValueResponse, error) {
	m := new(PrefixValueResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *queryServiceClient) Watch(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (QueryService_WatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_QueryService_serviceDesc.Streams[1], "/penumbra.cnidarium.v1.QueryService/Watch", opts...)
	if err != nil {
		return nil, err
	}
	x := &queryServiceWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type QueryService_WatchClient interface {
	Recv() (*WatchResponse, error)
	grpc.ClientStream
}

type queryServiceWatchClient struct {
	grpc.ClientStream
}

func (x *queryServiceWatchClient) Recv() (*WatchResponse, error) {
	m := new(WatchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// QueryServiceServer is the server API for QueryService service.
type QueryServiceServer interface {
	// General-purpose key-value state query API, that can be used to query
	// arbitrary keys in the JMT storage.
	KeyValue(context.Context, *KeyValueRequest) (*KeyValueResponse, error)
	// General-purpose prefixed key-value state query API, that can be used to query
	// arbitrary prefixes in the JMT storage.
	PrefixValue(*PrefixValueRequest, QueryService_PrefixValueServer) error
	// Subscribes to a stream of key-value updates, with regex filtering on keys.
	Watch(*WatchRequest, QueryService_WatchServer) error
}

// UnimplementedQueryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServiceServer struct {
}

func (*UnimplementedQueryServiceServer) KeyValue(ctx context.Context, req *KeyValueRequest) (*KeyValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KeyValue not implemented")
}
func (*UnimplementedQueryServiceServer) PrefixValue(req *PrefixValueRequest, srv QueryService_PrefixValueServer) error {
	return status.Errorf(codes.Unimplemented, "method PrefixValue not implemented")
}
func (*UnimplementedQueryServiceServer) Watch(req *WatchRequest, srv QueryService_WatchServer) error {
	return status.Errorf(codes.Unimplemented, "method Watch not implemented")
}

func RegisterQueryServiceServer(s grpc1.Server, srv QueryServiceServer) {
	s.RegisterService(&_QueryService_serviceDesc, srv)
}

func _QueryService_KeyValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).KeyValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/penumbra.cnidarium.v1.QueryService/KeyValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).KeyValue(ctx, req.(*KeyValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_PrefixValue_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PrefixValueRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QueryServiceServer).PrefixValue(m, &queryServicePrefixValueServer{stream})
}

type QueryService_PrefixValueServer interface {
	Send(*PrefixValueResponse) error
	grpc.ServerStream
}

type queryServicePrefixValueServer struct {
	grpc.ServerStream
}

func (x *queryServicePrefixValueServer) Send(m *PrefixValueResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _QueryService_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QueryServiceServer).Watch(m, &queryServiceWatchServer{stream})
}

type QueryService_WatchServer interface {
	Send(*WatchResponse) error
	grpc.ServerStream
}

type queryServiceWatchServer struct {
	grpc.ServerStream
}

func (x *queryServiceWatchServer) Send(m *WatchResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _QueryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "penumbra.cnidarium.v1.QueryService",
	HandlerType: (*QueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "KeyValue",
			Handler:    _QueryService_KeyValue_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PrefixValue",
			Handler:       _QueryService_PrefixValue_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Watch",
			Handler:       _QueryService_Watch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "penumbra/cnidarium/v1/cnidarium.proto",
}

func (m *KeyValueRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeyValueRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeyValueRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Proof {
		i--
		if m.Proof {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintCnidarium(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *KeyValueResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeyValueResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeyValueResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Proof != nil {
		{
			size, err := m.Proof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCnidarium(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Value != nil {
		{
			size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCnidarium(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *KeyValueResponse_Value) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeyValueResponse_Value) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeyValueResponse_Value) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintCnidarium(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PrefixValueRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrefixValueRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrefixValueRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Prefix) > 0 {
		i -= len(m.Prefix)
		copy(dAtA[i:], m.Prefix)
		i = encodeVarintCnidarium(dAtA, i, uint64(len(m.Prefix)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *PrefixValueResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrefixValueResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrefixValueResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintCnidarium(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintCnidarium(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WatchRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WatchRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WatchRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NvKeyRegex) > 0 {
		i -= len(m.NvKeyRegex)
		copy(dAtA[i:], m.NvKeyRegex)
		i = encodeVarintCnidarium(dAtA, i, uint64(len(m.NvKeyRegex)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.KeyRegex) > 0 {
		i -= len(m.KeyRegex)
		copy(dAtA[i:], m.KeyRegex)
		i = encodeVarintCnidarium(dAtA, i, uint64(len(m.KeyRegex)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WatchResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WatchResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WatchResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Entry != nil {
		{
			size := m.Entry.Size()
			i -= size
			if _, err := m.Entry.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Version != 0 {
		i = encodeVarintCnidarium(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WatchResponse_Kv) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WatchResponse_Kv) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Kv != nil {
		{
			size, err := m.Kv.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCnidarium(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *WatchResponse_NvKv) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WatchResponse_NvKv) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NvKv != nil {
		{
			size, err := m.NvKv.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCnidarium(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *WatchResponse_KeyValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WatchResponse_KeyValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WatchResponse_KeyValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Deleted {
		i--
		if m.Deleted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintCnidarium(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintCnidarium(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WatchResponse_NvKeyValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WatchResponse_NvKeyValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WatchResponse_NvKeyValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Deleted {
		i--
		if m.Deleted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintCnidarium(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintCnidarium(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCnidarium(dAtA []byte, offset int, v uint64) int {
	offset -= sovCnidarium(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *KeyValueRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovCnidarium(uint64(l))
	}
	if m.Proof {
		n += 2
	}
	return n
}

func (m *KeyValueResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovCnidarium(uint64(l))
	}
	if m.Proof != nil {
		l = m.Proof.Size()
		n += 1 + l + sovCnidarium(uint64(l))
	}
	return n
}

func (m *KeyValueResponse_Value) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovCnidarium(uint64(l))
	}
	return n
}

func (m *PrefixValueRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Prefix)
	if l > 0 {
		n += 1 + l + sovCnidarium(uint64(l))
	}
	return n
}

func (m *PrefixValueResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovCnidarium(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovCnidarium(uint64(l))
	}
	return n
}

func (m *WatchRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.KeyRegex)
	if l > 0 {
		n += 1 + l + sovCnidarium(uint64(l))
	}
	l = len(m.NvKeyRegex)
	if l > 0 {
		n += 1 + l + sovCnidarium(uint64(l))
	}
	return n
}

func (m *WatchResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovCnidarium(uint64(m.Version))
	}
	if m.Entry != nil {
		n += m.Entry.Size()
	}
	return n
}

func (m *WatchResponse_Kv) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Kv != nil {
		l = m.Kv.Size()
		n += 1 + l + sovCnidarium(uint64(l))
	}
	return n
}
func (m *WatchResponse_NvKv) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NvKv != nil {
		l = m.NvKv.Size()
		n += 1 + l + sovCnidarium(uint64(l))
	}
	return n
}
func (m *WatchResponse_KeyValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovCnidarium(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovCnidarium(uint64(l))
	}
	if m.Deleted {
		n += 2
	}
	return n
}

func (m *WatchResponse_NvKeyValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovCnidarium(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovCnidarium(uint64(l))
	}
	if m.Deleted {
		n += 2
	}
	return n
}

func sovCnidarium(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCnidarium(x uint64) (n int) {
	return sovCnidarium(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *KeyValueRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCnidarium
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyValueRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyValueRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCnidarium
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCnidarium
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCnidarium
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCnidarium
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Proof = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCnidarium(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCnidarium
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeyValueResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCnidarium
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyValueResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyValueResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCnidarium
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCnidarium
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCnidarium
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &KeyValueResponse_Value{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCnidarium
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCnidarium
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCnidarium
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Proof == nil {
				m.Proof = &types.MerkleProof{}
			}
			if err := m.Proof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCnidarium(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCnidarium
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeyValueResponse_Value) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCnidarium
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Value: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Value: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCnidarium
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCnidarium
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCnidarium
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCnidarium(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCnidarium
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrefixValueRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCnidarium
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrefixValueRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrefixValueRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCnidarium
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCnidarium
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCnidarium
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCnidarium(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCnidarium
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrefixValueResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCnidarium
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrefixValueResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrefixValueResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCnidarium
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCnidarium
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCnidarium
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCnidarium
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCnidarium
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCnidarium
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCnidarium(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCnidarium
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WatchRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCnidarium
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyRegex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCnidarium
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCnidarium
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCnidarium
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyRegex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NvKeyRegex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCnidarium
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCnidarium
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCnidarium
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NvKeyRegex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCnidarium(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCnidarium
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WatchResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCnidarium
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCnidarium
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kv", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCnidarium
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCnidarium
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCnidarium
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WatchResponse_KeyValue{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Entry = &WatchResponse_Kv{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NvKv", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCnidarium
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCnidarium
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCnidarium
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WatchResponse_NvKeyValue{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Entry = &WatchResponse_NvKv{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCnidarium(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCnidarium
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WatchResponse_KeyValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCnidarium
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCnidarium
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCnidarium
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCnidarium
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCnidarium
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCnidarium
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCnidarium
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deleted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCnidarium
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Deleted = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCnidarium(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCnidarium
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WatchResponse_NvKeyValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCnidarium
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NvKeyValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NvKeyValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCnidarium
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCnidarium
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCnidarium
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCnidarium
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCnidarium
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCnidarium
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deleted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCnidarium
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Deleted = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCnidarium(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCnidarium
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCnidarium(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCnidarium
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCnidarium
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCnidarium
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCnidarium
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCnidarium
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCnidarium
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCnidarium        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCnidarium          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCnidarium = fmt.Errorf("proto: unexpected end of group")
)
