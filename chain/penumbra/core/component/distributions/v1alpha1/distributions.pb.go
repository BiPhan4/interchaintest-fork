// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: penumbra/core/component/distributions/v1alpha1/distributions.proto

package distributionsv1alpha1

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Distribution configuration data.
type DistributionsParameters struct {
	// The amount of staking token issued per block.
	StakingIssuancePerBlock uint64 `protobuf:"varint,1,opt,name=staking_issuance_per_block,json=stakingIssuancePerBlock,proto3" json:"staking_issuance_per_block,omitempty"`
}

func (m *DistributionsParameters) Reset()         { *m = DistributionsParameters{} }
func (m *DistributionsParameters) String() string { return proto.CompactTextString(m) }
func (*DistributionsParameters) ProtoMessage()    {}
func (*DistributionsParameters) Descriptor() ([]byte, []int) {
	return fileDescriptor_5006eea51ea29289, []int{0}
}
func (m *DistributionsParameters) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DistributionsParameters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DistributionsParameters.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DistributionsParameters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DistributionsParameters.Merge(m, src)
}
func (m *DistributionsParameters) XXX_Size() int {
	return m.Size()
}
func (m *DistributionsParameters) XXX_DiscardUnknown() {
	xxx_messageInfo_DistributionsParameters.DiscardUnknown(m)
}

var xxx_messageInfo_DistributionsParameters proto.InternalMessageInfo

func (m *DistributionsParameters) GetStakingIssuancePerBlock() uint64 {
	if m != nil {
		return m.StakingIssuancePerBlock
	}
	return 0
}

// Genesis data for the distributions module.
type GenesisContent struct {
	DistributionsParams *DistributionsParameters `protobuf:"bytes,1,opt,name=distributions_params,json=distributionsParams,proto3" json:"distributions_params,omitempty"`
}

func (m *GenesisContent) Reset()         { *m = GenesisContent{} }
func (m *GenesisContent) String() string { return proto.CompactTextString(m) }
func (*GenesisContent) ProtoMessage()    {}
func (*GenesisContent) Descriptor() ([]byte, []int) {
	return fileDescriptor_5006eea51ea29289, []int{1}
}
func (m *GenesisContent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisContent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisContent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisContent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisContent.Merge(m, src)
}
func (m *GenesisContent) XXX_Size() int {
	return m.Size()
}
func (m *GenesisContent) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisContent.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisContent proto.InternalMessageInfo

func (m *GenesisContent) GetDistributionsParams() *DistributionsParameters {
	if m != nil {
		return m.DistributionsParams
	}
	return nil
}

func init() {
	proto.RegisterType((*DistributionsParameters)(nil), "penumbra.core.component.distributions.v1alpha1.DistributionsParameters")
	proto.RegisterType((*GenesisContent)(nil), "penumbra.core.component.distributions.v1alpha1.GenesisContent")
}

func init() {
	proto.RegisterFile("penumbra/core/component/distributions/v1alpha1/distributions.proto", fileDescriptor_5006eea51ea29289)
}

var fileDescriptor_5006eea51ea29289 = []byte{
	// 388 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0x31, 0x6b, 0xe3, 0x30,
	0x14, 0xc7, 0x63, 0x5f, 0xb8, 0xc1, 0x07, 0x37, 0xf8, 0x0e, 0x72, 0xdc, 0x60, 0x8e, 0x4c, 0xb7,
	0x54, 0x22, 0xe9, 0x52, 0x9c, 0xcd, 0x0e, 0x84, 0x0e, 0x05, 0x93, 0x21, 0x43, 0x31, 0x18, 0xd9,
	0x79, 0x24, 0x22, 0xb1, 0x64, 0x24, 0xd9, 0x43, 0xe9, 0x47, 0xe8, 0xd0, 0xcf, 0xd0, 0xb1, 0x5f,
	0xa1, 0x5f, 0xa0, 0x74, 0xca, 0xd8, 0xb1, 0x38, 0x5b, 0x3f, 0x45, 0x51, 0xb0, 0xd3, 0x8a, 0xd2,
	0xc1, 0x8b, 0x84, 0xde, 0x7b, 0xbf, 0xff, 0xfb, 0x3f, 0x49, 0x4e, 0x50, 0x00, 0x2b, 0xf3, 0x54,
	0x10, 0x9c, 0x71, 0x01, 0x38, 0xe3, 0x79, 0xc1, 0x19, 0x30, 0x85, 0x97, 0x54, 0x2a, 0x41, 0xd3,
	0x52, 0x51, 0xce, 0x24, 0xae, 0x46, 0x64, 0x5b, 0xac, 0xc9, 0xc8, 0x0c, 0xa3, 0x42, 0x70, 0xc5,
	0x5d, 0xd4, 0x6a, 0x20, 0xad, 0x81, 0x8e, 0x1a, 0xc8, 0x2c, 0x6e, 0x35, 0x86, 0x0b, 0x67, 0x30,
	0xfd, 0x98, 0x89, 0x88, 0x20, 0x39, 0x28, 0x10, 0xd2, 0x9d, 0x38, 0x7f, 0xa5, 0x22, 0x1b, 0xca,
	0x56, 0x09, 0x95, 0xb2, 0x24, 0x2c, 0x83, 0xa4, 0x00, 0x91, 0xa4, 0x5b, 0x9e, 0x6d, 0xfe, 0x58,
	0xff, 0xac, 0xff, 0xfd, 0xf9, 0xa0, 0xa9, 0x38, 0x6f, 0x0a, 0x22, 0x10, 0x81, 0x4e, 0x0f, 0x6f,
	0x2c, 0xe7, 0xe7, 0x0c, 0x18, 0x48, 0x2a, 0x43, 0xce, 0x14, 0x30, 0xe5, 0x5e, 0x39, 0xbf, 0x0d,
	0x13, 0x49, 0xa1, 0x7b, 0xc9, 0x83, 0xd2, 0x8f, 0xf1, 0xac, 0xa3, 0x73, 0xf4, 0x85, 0xed, 0xf9,
	0xaf, 0xe5, 0xa7, 0x84, 0x0c, 0x1e, 0xbe, 0x3d, 0xd6, 0x9e, 0xb5, 0xab, 0x3d, 0xeb, 0xa5, 0xf6,
	0xac, 0xdb, 0xbd, 0xd7, 0xdb, 0xed, 0xbd, 0xde, 0xf3, 0xde, 0xeb, 0x39, 0xe3, 0x8c, 0xe7, 0x1d,
	0x7b, 0x07, 0xae, 0xd9, 0x5c, 0xdf, 0x7c, 0x64, 0x5d, 0x5e, 0xaf, 0xa8, 0x5a, 0x97, 0xa9, 0xc6,
	0xb1, 0x54, 0x82, 0xb0, 0x15, 0x6c, 0x79, 0x05, 0x27, 0x15, 0x30, 0x55, 0x0a, 0x90, 0x98, 0x32,
	0x05, 0x22, 0x5b, 0x13, 0xbd, 0x4b, 0x85, 0xab, 0x33, 0x7c, 0x38, 0xe0, 0x6e, 0xef, 0x3e, 0x31,
	0xc2, 0x6d, 0xf4, 0xce, 0xee, 0x47, 0x61, 0x38, 0xbd, 0xb7, 0x51, 0xd4, 0xce, 0x12, 0xea, 0x59,
	0xc2, 0xe3, 0x2c, 0x86, 0x67, 0xb4, 0x68, 0xb8, 0xa7, 0x77, 0x20, 0xd6, 0x40, 0x7c, 0x04, 0x62,
	0x03, 0x88, 0x5b, 0xa0, 0xb6, 0xfd, 0x6e, 0x40, 0x3c, 0x8b, 0x82, 0x0b, 0x50, 0x64, 0x49, 0x14,
	0x79, 0xb5, 0xc7, 0x2d, 0xec, 0xfb, 0x9a, 0xd6, 0x6b, 0x83, 0xfb, 0xbe, 0xc1, 0xfb, 0x7e, 0x2b,
	0x90, 0x7e, 0x3f, 0xfc, 0xed, 0xd3, 0xb7, 0x00, 0x00, 0x00, 0xff, 0xff, 0x8d, 0xb3, 0x2c, 0x88,
	0x21, 0x03, 0x00, 0x00,
}

func (m *DistributionsParameters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DistributionsParameters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DistributionsParameters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StakingIssuancePerBlock != 0 {
		i = encodeVarintDistributions(dAtA, i, uint64(m.StakingIssuancePerBlock))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GenesisContent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisContent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisContent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DistributionsParams != nil {
		{
			size, err := m.DistributionsParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDistributions(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDistributions(dAtA []byte, offset int, v uint64) int {
	offset -= sovDistributions(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DistributionsParameters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StakingIssuancePerBlock != 0 {
		n += 1 + sovDistributions(uint64(m.StakingIssuancePerBlock))
	}
	return n
}

func (m *GenesisContent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DistributionsParams != nil {
		l = m.DistributionsParams.Size()
		n += 1 + l + sovDistributions(uint64(l))
	}
	return n
}

func sovDistributions(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDistributions(x uint64) (n int) {
	return sovDistributions(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DistributionsParameters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDistributions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DistributionsParameters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DistributionsParameters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingIssuancePerBlock", wireType)
			}
			m.StakingIssuancePerBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDistributions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StakingIssuancePerBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDistributions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDistributions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisContent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDistributions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisContent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisContent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributionsParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDistributions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDistributions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDistributions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DistributionsParams == nil {
				m.DistributionsParams = &DistributionsParameters{}
			}
			if err := m.DistributionsParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDistributions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDistributions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDistributions(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDistributions
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDistributions
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDistributions
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDistributions
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDistributions
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDistributions
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDistributions        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDistributions          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDistributions = fmt.Errorf("proto: unexpected end of group")
)
